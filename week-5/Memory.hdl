// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=load, sel=address[14], a=stage1out1, b=stage1out2);
    RAM16K(in=in, load=stage1out1, address=address[0..13], out=RAMout);
    DMux(in=stage1out2, sel=address[13], a=stage2out1, b=stage2out2);
    Screen(in=in, load=stage2out1, address=address[0..12], out=Screenout);
    Keyboard(out=kbdout);

    Mux16(a=RAMout, b=Screenout, sel=address[14], out=Mux1out);

    Not(in=address[14], out=not14);
    Not(in=address[13], out=not13);
    Or8Way(in[7]=false,
           in[6]=not14,
           in[5]=not13,
           in[0..4]=address[8..12],
           out=or1out);
    Or8Way(in=address[0..7], out=or2out);
    Or(a=or1out, b=or2out, out=orout);

    Mux16(a=kbdout, b=false, sel=orout, out=Mux2out);
    And(a=address[14], b=address[13], out=finalsel);
    Mux16(a=Mux1out, b=Mux2out, sel=finalsel, out=out);
}
